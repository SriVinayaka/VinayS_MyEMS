/**
 * 
 */
package com.gl.myems.security.entity.configuration;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.gl.myems.security.entity.MyEmsUserDetails;
import com.gl.myems.security.entity.service.implementation.MyEmsUserDetailsServiceImplementation;

/**
 * 
 */

@Configuration
@EnableWebSecurity
@SuppressWarnings("deprecation")
public class SecurityConfig extends WebSecurityConfigurerAdapter {

  @Autowired
  //private UserDetailsService userDetailsService;
  private UserDetailsService userDetailsService;

  @Override
  protected void configure(AuthenticationManagerBuilder auth) throws Exception {
    auth.userDetailsService(userDetailsService).passwordEncoder(new BCryptPasswordEncoder());
  }

  @Bean
  public MyEmsUserDetailsServiceImplementation userDetailsService() {
      return new MyEmsUserDetailsServiceImplementation();
  }
  
  /*
  @Bean
  public PasswordEncoder passwordEncoder() {
    return new BCryptPasswordEncoder();
  }
*/
  @Override
  protected void configure(HttpSecurity http) throws Exception {
    http.authorizeRequests()
        .antMatchers("/api/employees", "api/employees/*", "api/employees/createEmployee").permitAll() // Allow access to public API endpoint
        .anyRequest().authenticated()
        .and().httpBasic()
        .and().csrf().disable(); // Disable CSRF for simplicity (consider enabling in production)
  }
}
